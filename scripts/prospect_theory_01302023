### MEETING WITH SHAWN 3/3/2
trial_types = ['mix','gain','loss']
h_bets      = [.75, 0.75,-.75]
l_bets      = [-.25, .25, -.25]
s_bets      = [0,.5,-.5]
choices     = ['g','s','g']

risk_aversion = 2
loss_aversion = .8
mu = 1.25

p_list = []
for trial_type, high_bet, low_bet, safe_bet, choice in zip(trial_types, h_bets, l_bets, s_bets, choices):

  if trial_type == 'mix':
    util_gamble = (0.5 * (high_bet)**risk_aversion ) + ( 0.5 * loss_aversion * -(np.abs(low_bet)**risk_aversion) ) #might not need negative in front of low
    util_safe = 0
  elif trial_type == 'loss':
    util_gamble = ( 0.5 * loss_aversion * -(np.abs(high_bet)**risk_aversion) ) + ( 0.5 * loss_aversion * -(np.abs(low_bet)**risk_aversion) )
    util_safe = loss_aversion * safe_bet
  else: #gain
    util_gamble = ( 0.5 * (high_bet)**risk_aversion ) + ( 0.5 * (low_bet)**risk_aversion )
    util_safe = safe_bet

  p_gamble = np.exp(mu*util_gamble) / ( np.exp(mu*util_gamble) +  np.exp(mu*util_safe) )
  p_safe = np.exp(mu*util_safe) / ( np.exp(mu*util_gamble) +  np.exp(mu*util_safe) )

  if choice == 'g':
    p_list.append(p_gamble)
  elif choice == 's':
    p_list.append(p_safe)

  print(trial_type, p_gamble, p_safe)

negLL = -np.sum(np.log(p_list))